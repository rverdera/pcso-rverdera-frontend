@page "/live"
@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client



@if (messages != null)
{
    @foreach (var message in messages)
    {
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.body2">@message</MudText>
            </MudCardContent>
        </MudCard>
        <br />
    }
}



<MudTextField @bind-Value="name" Label="Name" Variant="Variant.Outlined"></MudTextField>
<MudTextField @bind-Value="message" Label="Message" Variant="Variant.Outlined"></MudTextField>
<br />
<MudButton Variant="Variant.Filled"
           EndIcon="@Icons.Material.Filled.Send"
           OnClick="Send"
           Color="Color.Primary">Send</MudButton>




@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? name;
    private string? message;



    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl("https://pcso-rverdera-backend.azurewebsites.net/chat")

        .Build();



        hubConnection.On<string, string>("Receive", (name, message) =>
        {
            var encodedMsg = $"{name} {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });



        await hubConnection.StartAsync();
    }



    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Broadcast", name, message);
            message = null;
        }
    }



    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;



    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}